{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialValue","localStorage","getItem","JSON","parse","checkArrayMatch","array1","array2","match","i","length","EntryListItem","props","onClickDelete","bind","onClickEdit","this","deleteEntry","Number","index","openEditDialogue","className","type","onClick","value","React","Component","EntryAddForm","state","tempPcodeValue","tempTownNameValue","handleClick","handleChange","newPcodeValue","trim","newTownNameValue","addEntry","setErrorMessage","event","target","name","test","setState","placeholder","onChange","App","arrPcodes","errMessage","editMode","editIndex","undefined","editPcodeValue","editTownNameValue","editEntry","onClickEditCancel","handleEditChange","updateStorage","entryAddForm","createRef","preventDefault","editedEntry","some","entry","splice","pCodeValue","townNameValue","newEntry","unshift","current","message","setItem","stringify","ref","map","key","id","onSubmit","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.fd0ac52a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nlet initialValue = [\n  [3000, \"Melbourne\"],\n  [3280, \"Warnambool\"],\n  [3450, \"Castlemaine\"],\n  [3350, \"Ballarat\"],\n  [3220, \"Geelong\"],\n  [3396, \"Hopetoun\"]\n];\n\nif (localStorage.getItem(\"arrPcodes\")) {\n  initialValue = JSON.parse(localStorage.getItem(\"arrPcodes\"));\n}\n\nconst checkArrayMatch = (array1, array2) => {\n  let match = true;\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      match = false;\n    }\n  }\n\n  return match;\n}\n\n\nclass EntryListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickDelete = this.onClickDelete.bind(this);\n    this.onClickEdit = this.onClickEdit.bind(this);\n  }\n\n  onClickDelete() {\n    this.props.deleteEntry(Number(this.props.index));\n  }\n\n  onClickEdit() {\n    this.props.openEditDialogue(this.props.index);\n  }\n\n  render() {\n    return (\n      <li>\n        <span className=\"entryListItem\">\n          <button type=\"button\" onClick={this.onClickDelete}>&times;</button>\n          {/* <input value={this.props.value[0]} />\n          <input value={this.props.value[1]} /> */}\n          <label>{this.props.value[0]}</label>\n          <label>{this.props.value[1]}</label>\n          <button type=\"button\" onClick={this.onClickEdit}>Edit</button>\n        </span>\n      </li>\n    )\n  }\n}\n\n\nclass EntryAddForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tempPcodeValue: \"\",\n      tempTownNameValue: \"\"\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick() {\n    let newPcodeValue = this.state.tempPcodeValue.trim();\n    let newTownNameValue = this.state.tempTownNameValue.trim();\n\n    if (newPcodeValue.length > 3 && newTownNameValue.length > 0) {\n      this.props.addEntry(Number(newPcodeValue), newTownNameValue);\n    } else {\n      if (newPcodeValue.length < 4) {\n        this.props.setErrorMessage(\"The postcode needs to be 4 digits long\")\n      } else if (newTownNameValue.length === 0) {\n        this.props.setErrorMessage(\"The town/suburb name cannot be empty\")\n      }\n    }\n  }\n\n  handleChange(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name === \"tempPcodeValue\") {\n      if ((/^[0-9]+$/.test(value) && value.length < 5) || value === \"\") {\n        this.setState({\n          [name]: value\n        })\n      }\n    } else if (name === \"tempTownNameValue\") {\n      if (/^[a-zA-Z\\s]+$/.test(value) || value === \"\") {\n        this.setState({\n          [name]: value\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <span>\n        <input type=\"number\" name=\"tempPcodeValue\" value={this.state.tempPcodeValue} placeholder=\"Enter postcode here\" onChange={this.handleChange} />\n        <input type=\"text\" name=\"tempTownNameValue\" value={this.state.tempTownNameValue} placeholder=\"Enter town/suburb name here\" onChange={this.handleChange} />\n        <button onClick={this.handleClick} >Add</button>\n      </span>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state= {\n      arrPcodes: initialValue,\n      errMessage: \"\",\n      editMode: false,\n      editIndex: undefined,\n      editPcodeValue: undefined,\n      editTownNameValue: undefined,\n    };\n\n    this.addEntry = this.addEntry.bind(this);\n    this.editEntry = this.editEntry.bind(this);\n    this.deleteEntry = this.deleteEntry.bind(this);\n    this.setErrorMessage = this.setErrorMessage.bind(this);\n    this.openEditDialogue = this.openEditDialogue.bind(this);\n    this.onClickEditCancel = this.onClickEditCancel.bind(this);\n    this.handleEditChange = this.handleEditChange.bind(this);\n    this.updateStorage = this.updateStorage.bind(this);\n\n    this.entryAddForm = React.createRef();\n  }\n\n  editEntry(event) {\n    event.preventDefault();\n    let editedEntry = [Number(this.state.editPcodeValue), this.state.editTownNameValue]\n    let arrPcodes = this.state.arrPcodes;\n    \n    if (arrPcodes.some((entry) => checkArrayMatch(editedEntry, entry))) {\n      if (checkArrayMatch(editedEntry, this.state.arrPcodes[this.state.editIndex])) {\n        this.onClickEditCancel();\n      } else {\n        this.setErrorMessage(\"The edited entry you're trying to save already exists\")\n      }\n    } else {\n      arrPcodes[this.state.editIndex] = editedEntry;\n      this.setState({\n        arrPcodes: arrPcodes,\n      })\n      this.onClickEditCancel();\n    }\n  }\n\n  deleteEntry(index) {\n    let arrPcodes = this.state.arrPcodes;\n    let removed = arrPcodes.splice(index, 1);\n\n    this.setState({\n      arrPcodes: arrPcodes\n    });\n  }\n\n  addEntry(pCodeValue, townNameValue) {\n    let newEntry = [pCodeValue, townNameValue];\n    let arrPcodes = this.state.arrPcodes;\n\n    if (arrPcodes.some((entry) => checkArrayMatch(newEntry, entry))) {\n      this.setState({\n        errMessage: \"This entry already exists\"\n      })\n    } else {\n      arrPcodes.unshift(newEntry);\n      this.setState({\n        arrPcodes: arrPcodes,\n        errMessage: \"\"\n      });\n\n      this.entryAddForm.current.setState({\n        tempPcodeValue: \"\",\n        tempTownNameValue: \"\"\n      })\n    }\n  }\n\n  openEditDialogue(index) {\n    this.setState({\n      editMode: true,\n      editIndex: index,\n      editPcodeValue: this.state.arrPcodes[index][0],\n      editTownNameValue: this.state.arrPcodes[index][1]\n    })\n  }\n\n  onClickEditCancel() {\n    this.setState({\n      editMode: false,\n      editIndex: undefined,\n      editPcodeValue: undefined,\n      editTownNameValue: undefined\n    })\n  }\n\n  handleEditChange(event) {\n    let target = event.target;\n    let name = target.name;\n    let value = target.value;\n\n    if (name === \"editPcodeValue\") {\n      if ((/^[0-9]+$/.test(value) && value.length < 5) || value === \"\") {\n        this.setState({\n          [name]: value\n        })\n      }\n    } else if (name === \"editTownNameValue\") {\n      if (/^[a-zA-Z\\s]+$/.test(value) || value === \"\") {\n        this.setState({\n          [name]: value\n        })\n      }\n    }\n  }\n\n  setErrorMessage(message) {\n    this.setState({\n      errMessage: message\n    })\n  }\n\n  updateStorage() {\n    localStorage.setItem(\"arrPcodes\", JSON.stringify(this.state.arrPcodes));\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Postcodes</h1>\n        <EntryAddForm addEntry={this.addEntry} setErrorMessage={this.setErrorMessage} ref={this.entryAddForm}/>\n        <p>{this.state.errMessage}</p>\n        <ul>\n          {this.state.arrPcodes.map((entry, index) => \n            <EntryListItem value={entry} key={index} index={index} deleteEntry={this.deleteEntry} openEditDialogue={this.openEditDialogue} />\n          )}\n        </ul>\n        {this.state.editMode ? \n        <form id=\"edit-overlay\" onSubmit={this.editEntry}>\n          <h2>Edit entry</h2>\n          <span>\n            <input value={this.state.editPcodeValue} onChange={this.handleEditChange} name=\"editPcodeValue\"/>\n            <input value={this.state.editTownNameValue} onChange={this.handleEditChange} name=\"editTownNameValue\" />\n          </span>\n          <span>\n           <button type=\"submit\">Save</button>\n           <button onClick={this.onClickEditCancel}>Cancel</button>\n          </span>\n        </form>\n        : \"\"}\n        <button onClick={this.updateStorage}>Update HTML5 Local Storage</button>\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}